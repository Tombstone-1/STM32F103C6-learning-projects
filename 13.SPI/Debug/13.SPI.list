
13.SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080018b4  080018b4  000028b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018e8  080018e8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080018e8  080018e8  000028e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018f0  080018f0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f0  080018f0  000028f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018f4  080018f4  000028f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080018f8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08001904  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001904  00003084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048d3  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f6  00000000  00000000  00007908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  00008b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000439  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016205  00000000  00000000  000094f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000688f  00000000  00000000  0001f6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e6fe  00000000  00000000  00025f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a4683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b8  00000000  00000000  000a46c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000a5c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800189c 	.word	0x0800189c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800189c 	.word	0x0800189c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b087      	sub	sp, #28
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int len = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	617b      	str	r3, [r7, #20]
	char spi_dat[] = "hello Arduino";
 8000166:	4b22      	ldr	r3, [pc, #136]	@ (80001f0 <main+0x94>)
 8000168:	1d3c      	adds	r4, r7, #4
 800016a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016c:	c407      	stmia	r4!, {r0, r1, r2}
 800016e:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000170:	f000 f9f2 	bl	8000558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000174:	f000 f844 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000178:	f000 f8b4 	bl	80002e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800017c:	f000 f87c 	bl	8000278 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    while(!(HAL_GPIO_ReadPin(GPIOA, SW_PIN)));	// wait for  switch press
 8000180:	bf00      	nop
 8000182:	2110      	movs	r1, #16
 8000184:	481b      	ldr	r0, [pc, #108]	@ (80001f4 <main+0x98>)
 8000186:	f000 fccd 	bl	8000b24 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d0f8      	beq.n	8000182 <main+0x26>
    HAL_GPIO_WritePin(GPIOA, SPI_CS, 0);	// enable the slave
 8000190:	2200      	movs	r2, #0
 8000192:	2140      	movs	r1, #64	@ 0x40
 8000194:	4817      	ldr	r0, [pc, #92]	@ (80001f4 <main+0x98>)
 8000196:	f000 fcdc 	bl	8000b52 <HAL_GPIO_WritePin>

    len = strlen(spi_dat);		// don't type cast here as it may lead to over buffer or read garbage.
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	4618      	mov	r0, r3
 800019e:	f7ff ffd5 	bl	800014c <strlen>
 80001a2:	4603      	mov	r3, r0
 80001a4:	617b      	str	r3, [r7, #20]

    HAL_SPI_Transmit(&hspi1, (uint8_t *)len, 1, 100);		// sending length of string
 80001a6:	6979      	ldr	r1, [r7, #20]
 80001a8:	2364      	movs	r3, #100	@ 0x64
 80001aa:	2201      	movs	r2, #1
 80001ac:	4812      	ldr	r0, [pc, #72]	@ (80001f8 <main+0x9c>)
 80001ae:	f001 f94b 	bl	8001448 <HAL_SPI_Transmit>
    HAL_Delay(100);
 80001b2:	2064      	movs	r0, #100	@ 0x64
 80001b4:	f000 fa32 	bl	800061c <HAL_Delay>

    HAL_GPIO_WritePin(GPIOC, BUILTIN_LED, 1);		// led on
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001be:	480f      	ldr	r0, [pc, #60]	@ (80001fc <main+0xa0>)
 80001c0:	f000 fcc7 	bl	8000b52 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80001c4:	2064      	movs	r0, #100	@ 0x64
 80001c6:	f000 fa29 	bl	800061c <HAL_Delay>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_dat, sizeof(spi_dat), 100);		// sending length of string
 80001ca:	1d39      	adds	r1, r7, #4
 80001cc:	2364      	movs	r3, #100	@ 0x64
 80001ce:	220e      	movs	r2, #14
 80001d0:	4809      	ldr	r0, [pc, #36]	@ (80001f8 <main+0x9c>)
 80001d2:	f001 f939 	bl	8001448 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOC, BUILTIN_LED, 0);	// disable led.
 80001d6:	2200      	movs	r2, #0
 80001d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001dc:	4807      	ldr	r0, [pc, #28]	@ (80001fc <main+0xa0>)
 80001de:	f000 fcb8 	bl	8000b52 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, SPI_CS, 1);	// disable slave.
 80001e2:	2201      	movs	r2, #1
 80001e4:	2140      	movs	r1, #64	@ 0x40
 80001e6:	4803      	ldr	r0, [pc, #12]	@ (80001f4 <main+0x98>)
 80001e8:	f000 fcb3 	bl	8000b52 <HAL_GPIO_WritePin>
    while(!(HAL_GPIO_ReadPin(GPIOA, SW_PIN)));	// wait for  switch press
 80001ec:	e7c8      	b.n	8000180 <main+0x24>
 80001ee:	bf00      	nop
 80001f0:	080018b4 	.word	0x080018b4
 80001f4:	40010800 	.word	0x40010800
 80001f8:	20000028 	.word	0x20000028
 80001fc:	40011000 	.word	0x40011000

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b090      	sub	sp, #64	@ 0x40
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	2228      	movs	r2, #40	@ 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fb17 	bl	8001842 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022e:	2300      	movs	r3, #0
 8000230:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fca4 	bl	8000b84 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000242:	f000 f8bb 	bl	80003bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000246:	230f      	movs	r3, #15
 8000248:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f000 ff12 	bl	8001088 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800026a:	f000 f8a7 	bl	80003bc <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	@ 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800027c:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <MX_SPI1_Init+0x64>)
 800027e:	4a18      	ldr	r2, [pc, #96]	@ (80002e0 <MX_SPI1_Init+0x68>)
 8000280:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000282:	4b16      	ldr	r3, [pc, #88]	@ (80002dc <MX_SPI1_Init+0x64>)
 8000284:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000288:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800028a:	4b14      	ldr	r3, [pc, #80]	@ (80002dc <MX_SPI1_Init+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <MX_SPI1_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000296:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_SPI1_Init+0x64>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <MX_SPI1_Init+0x64>)
 800029e:	2200      	movs	r2, #0
 80002a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_SPI1_Init+0x64>)
 80002a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <MX_SPI1_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <MX_SPI1_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <MX_SPI1_Init+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <MX_SPI1_Init+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002c2:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <MX_SPI1_Init+0x64>)
 80002c4:	220a      	movs	r2, #10
 80002c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <MX_SPI1_Init+0x64>)
 80002ca:	f001 f839 	bl	8001340 <HAL_SPI_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002d4:	f000 f872 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000028 	.word	0x20000028
 80002e0:	40013000 	.word	0x40013000

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b2d      	ldr	r3, [pc, #180]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a2c      	ldr	r2, [pc, #176]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b2a      	ldr	r3, [pc, #168]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b27      	ldr	r3, [pc, #156]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a26      	ldr	r2, [pc, #152]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b24      	ldr	r3, [pc, #144]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b21      	ldr	r3, [pc, #132]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a20      	ldr	r2, [pc, #128]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b1e      	ldr	r3, [pc, #120]	@ (80003b0 <MX_GPIO_Init+0xcc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000346:	481b      	ldr	r0, [pc, #108]	@ (80003b4 <MX_GPIO_Init+0xd0>)
 8000348:	f000 fc03 	bl	8000b52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2140      	movs	r1, #64	@ 0x40
 8000350:	4819      	ldr	r0, [pc, #100]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000352:	f000 fbfe 	bl	8000b52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035c:	2301      	movs	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000364:	2302      	movs	r3, #2
 8000366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4619      	mov	r1, r3
 800036e:	4811      	ldr	r0, [pc, #68]	@ (80003b4 <MX_GPIO_Init+0xd0>)
 8000370:	f000 fa5c 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000374:	2310      	movs	r3, #16
 8000376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 8000388:	f000 fa50 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800038c:	2340      	movs	r3, #64	@ 0x40
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	2301      	movs	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	2302      	movs	r3, #2
 800039a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <MX_GPIO_Init+0xd4>)
 80003a4:	f000 fa42 	bl	800082c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a8:	bf00      	nop
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40011000 	.word	0x40011000
 80003b8:	40010800 	.word	0x40010800

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <Error_Handler+0x8>

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	@ (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	@ (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	@ (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a15      	ldr	r2, [pc, #84]	@ (800049c <HAL_SPI_MspInit+0x70>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d123      	bne.n	8000494 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800044c:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <HAL_SPI_MspInit+0x74>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a13      	ldr	r2, [pc, #76]	@ (80004a0 <HAL_SPI_MspInit+0x74>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <HAL_SPI_MspInit+0x74>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <HAL_SPI_MspInit+0x74>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a0d      	ldr	r2, [pc, #52]	@ (80004a0 <HAL_SPI_MspInit+0x74>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <HAL_SPI_MspInit+0x74>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800047c:	23a0      	movs	r3, #160	@ 0xa0
 800047e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000480:	2302      	movs	r3, #2
 8000482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000484:	2303      	movs	r3, #3
 8000486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <HAL_SPI_MspInit+0x78>)
 8000490:	f000 f9cc 	bl	800082c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40013000 	.word	0x40013000
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010800 	.word	0x40010800

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <NMI_Handler+0x4>

080004b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <HardFault_Handler+0x4>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <MemManage_Handler+0x4>

080004c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <UsageFault_Handler+0x4>

080004d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f8:	f000 f874 	bl	80005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800050c:	f7ff fff8 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480b      	ldr	r0, [pc, #44]	@ (8000540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000512:	490c      	ldr	r1, [pc, #48]	@ (8000544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a09      	ldr	r2, [pc, #36]	@ (800054c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000528:	4c09      	ldr	r4, [pc, #36]	@ (8000550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000536:	f001 f98d 	bl	8001854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fe0f 	bl	800015c <main>
  bx lr
 800053e:	4770      	bx	lr
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000544:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000548:	080018f8 	.word	0x080018f8
  ldr r2, =_sbss
 800054c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000550:	20000084 	.word	0x20000084

08000554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC1_2_IRQHandler>
	...

08000558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <HAL_Init+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a07      	ldr	r2, [pc, #28]	@ (8000580 <HAL_Init+0x28>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f92b 	bl	80007c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056e:	200f      	movs	r0, #15
 8000570:	f000 f808 	bl	8000584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000574:	f7ff ff28 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40022000 	.word	0x40022000

08000584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <HAL_InitTick+0x54>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <HAL_InitTick+0x58>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800059a:	fbb3 f3f1 	udiv	r3, r3, r1
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f935 	bl	8000812 <HAL_SYSTICK_Config>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e00e      	b.n	80005d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d80a      	bhi.n	80005ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	f04f 30ff 	mov.w	r0, #4294967295
 80005c0:	f000 f90b 	bl	80007da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <HAL_InitTick+0x5c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	e000      	b.n	80005d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000004 	.word	0x20000004

080005e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <HAL_IncTick+0x1c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_IncTick+0x20>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a03      	ldr	r2, [pc, #12]	@ (8000604 <HAL_IncTick+0x20>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20000008 	.word	0x20000008
 8000604:	20000080 	.word	0x20000080

08000608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return uwTick;
 800060c:	4b02      	ldr	r3, [pc, #8]	@ (8000618 <HAL_GetTick+0x10>)
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	20000080 	.word	0x20000080

0800061c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff0 	bl	8000608 <HAL_GetTick>
 8000628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000634:	d005      	beq.n	8000642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <HAL_Delay+0x44>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000642:	bf00      	nop
 8000644:	f7ff ffe0 	bl	8000608 <HAL_GetTick>
 8000648:	4602      	mov	r2, r0
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	429a      	cmp	r2, r3
 8000652:	d8f7      	bhi.n	8000644 <HAL_Delay+0x28>
  {
  }
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000008 	.word	0x20000008

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	@ (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	@ (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	@ 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	@ 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000790:	d301      	bcc.n	8000796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000792:	2301      	movs	r3, #1
 8000794:	e00f      	b.n	80007b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000796:	4a0a      	ldr	r2, [pc, #40]	@ (80007c0 <SysTick_Config+0x40>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079e:	210f      	movs	r1, #15
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f7ff ff90 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <SysTick_Config+0x40>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <SysTick_Config+0x40>)
 80007b0:	2207      	movs	r2, #7
 80007b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff49 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ec:	f7ff ff5e 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80007f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	6978      	ldr	r0, [r7, #20]
 80007f8:	f7ff ff90 	bl	800071c <NVIC_EncodePriority>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff5f 	bl	80006c8 <__NVIC_SetPriority>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffb0 	bl	8000780 <SysTick_Config>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800082c:	b480      	push	{r7}
 800082e:	b08b      	sub	sp, #44	@ 0x2c
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800083e:	e161      	b.n	8000b04 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000840:	2201      	movs	r2, #1
 8000842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	4013      	ands	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	429a      	cmp	r2, r3
 800085a:	f040 8150 	bne.w	8000afe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	4a97      	ldr	r2, [pc, #604]	@ (8000ac0 <HAL_GPIO_Init+0x294>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d05e      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 8000868:	4a95      	ldr	r2, [pc, #596]	@ (8000ac0 <HAL_GPIO_Init+0x294>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d875      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 800086e:	4a95      	ldr	r2, [pc, #596]	@ (8000ac4 <HAL_GPIO_Init+0x298>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d058      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 8000874:	4a93      	ldr	r2, [pc, #588]	@ (8000ac4 <HAL_GPIO_Init+0x298>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d86f      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 800087a:	4a93      	ldr	r2, [pc, #588]	@ (8000ac8 <HAL_GPIO_Init+0x29c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d052      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 8000880:	4a91      	ldr	r2, [pc, #580]	@ (8000ac8 <HAL_GPIO_Init+0x29c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d869      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 8000886:	4a91      	ldr	r2, [pc, #580]	@ (8000acc <HAL_GPIO_Init+0x2a0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d04c      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 800088c:	4a8f      	ldr	r2, [pc, #572]	@ (8000acc <HAL_GPIO_Init+0x2a0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d863      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 8000892:	4a8f      	ldr	r2, [pc, #572]	@ (8000ad0 <HAL_GPIO_Init+0x2a4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d046      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
 8000898:	4a8d      	ldr	r2, [pc, #564]	@ (8000ad0 <HAL_GPIO_Init+0x2a4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d85d      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d82a      	bhi.n	80008f8 <HAL_GPIO_Init+0xcc>
 80008a2:	2b12      	cmp	r3, #18
 80008a4:	d859      	bhi.n	800095a <HAL_GPIO_Init+0x12e>
 80008a6:	a201      	add	r2, pc, #4	@ (adr r2, 80008ac <HAL_GPIO_Init+0x80>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	08000927 	.word	0x08000927
 80008b0:	08000901 	.word	0x08000901
 80008b4:	08000913 	.word	0x08000913
 80008b8:	08000955 	.word	0x08000955
 80008bc:	0800095b 	.word	0x0800095b
 80008c0:	0800095b 	.word	0x0800095b
 80008c4:	0800095b 	.word	0x0800095b
 80008c8:	0800095b 	.word	0x0800095b
 80008cc:	0800095b 	.word	0x0800095b
 80008d0:	0800095b 	.word	0x0800095b
 80008d4:	0800095b 	.word	0x0800095b
 80008d8:	0800095b 	.word	0x0800095b
 80008dc:	0800095b 	.word	0x0800095b
 80008e0:	0800095b 	.word	0x0800095b
 80008e4:	0800095b 	.word	0x0800095b
 80008e8:	0800095b 	.word	0x0800095b
 80008ec:	0800095b 	.word	0x0800095b
 80008f0:	08000909 	.word	0x08000909
 80008f4:	0800091d 	.word	0x0800091d
 80008f8:	4a76      	ldr	r2, [pc, #472]	@ (8000ad4 <HAL_GPIO_Init+0x2a8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d013      	beq.n	8000926 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008fe:	e02c      	b.n	800095a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	623b      	str	r3, [r7, #32]
          break;
 8000906:	e029      	b.n	800095c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	3304      	adds	r3, #4
 800090e:	623b      	str	r3, [r7, #32]
          break;
 8000910:	e024      	b.n	800095c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	3308      	adds	r3, #8
 8000918:	623b      	str	r3, [r7, #32]
          break;
 800091a:	e01f      	b.n	800095c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	330c      	adds	r3, #12
 8000922:	623b      	str	r3, [r7, #32]
          break;
 8000924:	e01a      	b.n	800095c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d102      	bne.n	8000934 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800092e:	2304      	movs	r3, #4
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e013      	b.n	800095c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d105      	bne.n	8000948 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800093c:	2308      	movs	r3, #8
 800093e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	611a      	str	r2, [r3, #16]
          break;
 8000946:	e009      	b.n	800095c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000948:	2308      	movs	r3, #8
 800094a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	615a      	str	r2, [r3, #20]
          break;
 8000952:	e003      	b.n	800095c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e000      	b.n	800095c <HAL_GPIO_Init+0x130>
          break;
 800095a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	2bff      	cmp	r3, #255	@ 0xff
 8000960:	d801      	bhi.n	8000966 <HAL_GPIO_Init+0x13a>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	e001      	b.n	800096a <HAL_GPIO_Init+0x13e>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3304      	adds	r3, #4
 800096a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	2bff      	cmp	r3, #255	@ 0xff
 8000970:	d802      	bhi.n	8000978 <HAL_GPIO_Init+0x14c>
 8000972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	e002      	b.n	800097e <HAL_GPIO_Init+0x152>
 8000978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097a:	3b08      	subs	r3, #8
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	210f      	movs	r1, #15
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	401a      	ands	r2, r3
 8000990:	6a39      	ldr	r1, [r7, #32]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	431a      	orrs	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 80a9 	beq.w	8000afe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ac:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad8 <HAL_GPIO_Init+0x2ac>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a49      	ldr	r2, [pc, #292]	@ (8000ad8 <HAL_GPIO_Init+0x2ac>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b47      	ldr	r3, [pc, #284]	@ (8000ad8 <HAL_GPIO_Init+0x2ac>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c4:	4a45      	ldr	r2, [pc, #276]	@ (8000adc <HAL_GPIO_Init+0x2b0>)
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	3302      	adds	r3, #2
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	220f      	movs	r2, #15
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a3d      	ldr	r2, [pc, #244]	@ (8000ae0 <HAL_GPIO_Init+0x2b4>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d00d      	beq.n	8000a0c <HAL_GPIO_Init+0x1e0>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ae4 <HAL_GPIO_Init+0x2b8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d007      	beq.n	8000a08 <HAL_GPIO_Init+0x1dc>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a3b      	ldr	r2, [pc, #236]	@ (8000ae8 <HAL_GPIO_Init+0x2bc>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d101      	bne.n	8000a04 <HAL_GPIO_Init+0x1d8>
 8000a00:	2302      	movs	r3, #2
 8000a02:	e004      	b.n	8000a0e <HAL_GPIO_Init+0x1e2>
 8000a04:	2303      	movs	r3, #3
 8000a06:	e002      	b.n	8000a0e <HAL_GPIO_Init+0x1e2>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <HAL_GPIO_Init+0x1e2>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a10:	f002 0203 	and.w	r2, r2, #3
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1e:	492f      	ldr	r1, [pc, #188]	@ (8000adc <HAL_GPIO_Init+0x2b0>)
 8000a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a38:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	492b      	ldr	r1, [pc, #172]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4927      	ldr	r1, [pc, #156]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	4921      	ldr	r1, [pc, #132]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60cb      	str	r3, [r1, #12]
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	491d      	ldr	r1, [pc, #116]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4917      	ldr	r1, [pc, #92]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4913      	ldr	r1, [pc, #76]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d01f      	beq.n	8000af0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	490d      	ldr	r1, [pc, #52]	@ (8000aec <HAL_GPIO_Init+0x2c0>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	600b      	str	r3, [r1, #0]
 8000abc:	e01f      	b.n	8000afe <HAL_GPIO_Init+0x2d2>
 8000abe:	bf00      	nop
 8000ac0:	10320000 	.word	0x10320000
 8000ac4:	10310000 	.word	0x10310000
 8000ac8:	10220000 	.word	0x10220000
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	10120000 	.word	0x10120000
 8000ad4:	10110000 	.word	0x10110000
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <HAL_GPIO_Init+0x2f4>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	4909      	ldr	r1, [pc, #36]	@ (8000b20 <HAL_GPIO_Init+0x2f4>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f47f ae96 	bne.w	8000840 <HAL_GPIO_Init+0x14>
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	372c      	adds	r7, #44	@ 0x2c
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e001      	b.n	8000b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	807b      	strh	r3, [r7, #2]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b62:	787b      	ldrb	r3, [r7, #1]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b68:	887a      	ldrh	r2, [r7, #2]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b6e:	e003      	b.n	8000b78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b70:	887b      	ldrh	r3, [r7, #2]
 8000b72:	041a      	lsls	r2, r3, #16
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	611a      	str	r2, [r3, #16]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e272      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8087 	beq.w	8000cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ba4:	4b92      	ldr	r3, [pc, #584]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d00c      	beq.n	8000bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb0:	4b8f      	ldr	r3, [pc, #572]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d112      	bne.n	8000be2 <HAL_RCC_OscConfig+0x5e>
 8000bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bc8:	d10b      	bne.n	8000be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bca:	4b89      	ldr	r3, [pc, #548]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d06c      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x12c>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d168      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e24c      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bea:	d106      	bne.n	8000bfa <HAL_RCC_OscConfig+0x76>
 8000bec:	4b80      	ldr	r3, [pc, #512]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a7f      	ldr	r2, [pc, #508]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e02e      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10c      	bne.n	8000c1c <HAL_RCC_OscConfig+0x98>
 8000c02:	4b7b      	ldr	r3, [pc, #492]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a7a      	ldr	r2, [pc, #488]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4b78      	ldr	r3, [pc, #480]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a77      	ldr	r2, [pc, #476]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e01d      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c24:	d10c      	bne.n	8000c40 <HAL_RCC_OscConfig+0xbc>
 8000c26:	4b72      	ldr	r3, [pc, #456]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a71      	ldr	r2, [pc, #452]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	4b6f      	ldr	r3, [pc, #444]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a6e      	ldr	r2, [pc, #440]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e00b      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000c40:	4b6b      	ldr	r3, [pc, #428]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a6a      	ldr	r2, [pc, #424]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b68      	ldr	r3, [pc, #416]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a67      	ldr	r2, [pc, #412]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fcd2 	bl	8000608 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fcce 	bl	8000608 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	@ 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e200      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f0      	beq.n	8000c68 <HAL_RCC_OscConfig+0xe4>
 8000c86:	e014      	b.n	8000cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fcbe 	bl	8000608 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fcba 	bl	8000608 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	@ 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1ec      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	4b53      	ldr	r3, [pc, #332]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x10c>
 8000cae:	e000      	b.n	8000cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d063      	beq.n	8000d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00b      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cca:	4b49      	ldr	r3, [pc, #292]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b08      	cmp	r3, #8
 8000cd4:	d11c      	bne.n	8000d10 <HAL_RCC_OscConfig+0x18c>
 8000cd6:	4b46      	ldr	r3, [pc, #280]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d116      	bne.n	8000d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce2:	4b43      	ldr	r3, [pc, #268]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d005      	beq.n	8000cfa <HAL_RCC_OscConfig+0x176>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d001      	beq.n	8000cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e1c0      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4939      	ldr	r1, [pc, #228]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0e:	e03a      	b.n	8000d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d020      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d18:	4b36      	ldr	r3, [pc, #216]	@ (8000df4 <HAL_RCC_OscConfig+0x270>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fc73 	bl	8000608 <HAL_GetTick>
 8000d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d26:	f7ff fc6f 	bl	8000608 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e1a1      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f0      	beq.n	8000d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d44:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4927      	ldr	r1, [pc, #156]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
 8000d58:	e015      	b.n	8000d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5a:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <HAL_RCC_OscConfig+0x270>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fc52 	bl	8000608 <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d68:	f7ff fc4e 	bl	8000608 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e180      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f0      	bne.n	8000d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d03a      	beq.n	8000e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d019      	beq.n	8000dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9a:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <HAL_RCC_OscConfig+0x274>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fc32 	bl	8000608 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc2e 	bl	8000608 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e160      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 fa9c 	bl	8001304 <RCC_Delay>
 8000dcc:	e01c      	b.n	8000e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <HAL_RCC_OscConfig+0x274>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fc18 	bl	8000608 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dda:	e00f      	b.n	8000dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc14 	bl	8000608 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d908      	bls.n	8000dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e146      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	42420000 	.word	0x42420000
 8000df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfc:	4b92      	ldr	r3, [pc, #584]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e9      	bne.n	8000ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80a6 	beq.w	8000f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10d      	bne.n	8000e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b88      	ldr	r3, [pc, #544]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a87      	ldr	r2, [pc, #540]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b85      	ldr	r3, [pc, #532]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e42:	4b82      	ldr	r3, [pc, #520]	@ (800104c <HAL_RCC_OscConfig+0x4c8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d118      	bne.n	8000e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800104c <HAL_RCC_OscConfig+0x4c8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a7e      	ldr	r2, [pc, #504]	@ (800104c <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fbd5 	bl	8000608 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e62:	f7ff fbd1 	bl	8000608 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b64      	cmp	r3, #100	@ 0x64
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e103      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	4b75      	ldr	r3, [pc, #468]	@ (800104c <HAL_RCC_OscConfig+0x4c8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d106      	bne.n	8000e96 <HAL_RCC_OscConfig+0x312>
 8000e88:	4b6f      	ldr	r3, [pc, #444]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6213      	str	r3, [r2, #32]
 8000e94:	e02d      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x334>
 8000e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	4a69      	ldr	r2, [pc, #420]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6213      	str	r3, [r2, #32]
 8000eaa:	4b67      	ldr	r3, [pc, #412]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a66      	ldr	r2, [pc, #408]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	e01c      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d10c      	bne.n	8000eda <HAL_RCC_OscConfig+0x356>
 8000ec0:	4b61      	ldr	r3, [pc, #388]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a60      	ldr	r2, [pc, #384]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a5d      	ldr	r2, [pc, #372]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	e00b      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000eda:	4b5b      	ldr	r3, [pc, #364]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a5a      	ldr	r2, [pc, #360]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	4b58      	ldr	r3, [pc, #352]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a57      	ldr	r2, [pc, #348]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d015      	beq.n	8000f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fb85 	bl	8000608 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f00:	e00a      	b.n	8000f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fb81 	bl	8000608 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e0b1      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f18:	4b4b      	ldr	r3, [pc, #300]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0ee      	beq.n	8000f02 <HAL_RCC_OscConfig+0x37e>
 8000f24:	e014      	b.n	8000f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f26:	f7ff fb6f 	bl	8000608 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2c:	e00a      	b.n	8000f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fb6b 	bl	8000608 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e09b      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f44:	4b40      	ldr	r3, [pc, #256]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1ee      	bne.n	8000f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d105      	bne.n	8000f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f56:	4b3c      	ldr	r3, [pc, #240]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8087 	beq.w	800107a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f6c:	4b36      	ldr	r3, [pc, #216]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d061      	beq.n	800103c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d146      	bne.n	800100e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f80:	4b33      	ldr	r3, [pc, #204]	@ (8001050 <HAL_RCC_OscConfig+0x4cc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb3f 	bl	8000608 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fb3b 	bl	8000608 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e06d      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa0:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb4:	d108      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fb6:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	4921      	ldr	r1, [pc, #132]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a19      	ldr	r1, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	491b      	ldr	r1, [pc, #108]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <HAL_RCC_OscConfig+0x4cc>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fb0f 	bl	8000608 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fee:	f7ff fb0b 	bl	8000608 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e03d      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x46a>
 800100c:	e035      	b.n	800107a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HAL_RCC_OscConfig+0x4cc>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff faf8 	bl	8000608 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101c:	f7ff faf4 	bl	8000608 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e026      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x498>
 800103a:	e01e      	b.n	800107a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d107      	bne.n	8001054 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e019      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
 8001048:	40021000 	.word	0x40021000
 800104c:	40007000 	.word	0x40007000
 8001050:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_RCC_OscConfig+0x500>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	429a      	cmp	r2, r3
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001072:	429a      	cmp	r2, r3
 8001074:	d001      	beq.n	800107a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0d0      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800109c:	4b6a      	ldr	r3, [pc, #424]	@ (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d910      	bls.n	80010cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b67      	ldr	r3, [pc, #412]	@ (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 0207 	bic.w	r2, r3, #7
 80010b2:	4965      	ldr	r1, [pc, #404]	@ (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b63      	ldr	r3, [pc, #396]	@ (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0b8      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e4:	4b59      	ldr	r3, [pc, #356]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4a58      	ldr	r2, [pc, #352]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010fc:	4b53      	ldr	r3, [pc, #332]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a52      	ldr	r2, [pc, #328]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001106:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001108:	4b50      	ldr	r3, [pc, #320]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	494d      	ldr	r1, [pc, #308]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d040      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b47      	ldr	r3, [pc, #284]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d115      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e07f      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001146:	4b41      	ldr	r3, [pc, #260]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e073      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e06b      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001166:	4b39      	ldr	r3, [pc, #228]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f023 0203 	bic.w	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4936      	ldr	r1, [pc, #216]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001178:	f7ff fa46 	bl	8000608 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	e00a      	b.n	8001196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001180:	f7ff fa42 	bl	8000608 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e053      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001196:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 020c 	and.w	r2, r3, #12
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d1eb      	bne.n	8001180 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011a8:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d210      	bcs.n	80011d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 0207 	bic.w	r2, r3, #7
 80011be:	4922      	ldr	r1, [pc, #136]	@ (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e032      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4916      	ldr	r1, [pc, #88]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	490e      	ldr	r1, [pc, #56]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001216:	f000 f821 	bl	800125c <HAL_RCC_GetSysClockFreq>
 800121a:	4602      	mov	r2, r0
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	490a      	ldr	r1, [pc, #40]	@ (8001250 <HAL_RCC_ClockConfig+0x1c8>)
 8001228:	5ccb      	ldrb	r3, [r1, r3]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <HAL_RCC_ClockConfig+0x1cc>)
 8001230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_RCC_ClockConfig+0x1d0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f9a4 	bl	8000584 <HAL_InitTick>

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40022000 	.word	0x40022000
 800124c:	40021000 	.word	0x40021000
 8001250:	080018c4 	.word	0x080018c4
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b04      	cmp	r3, #4
 8001284:	d002      	beq.n	800128c <HAL_RCC_GetSysClockFreq+0x30>
 8001286:	2b08      	cmp	r3, #8
 8001288:	d003      	beq.n	8001292 <HAL_RCC_GetSysClockFreq+0x36>
 800128a:	e027      	b.n	80012dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800128e:	613b      	str	r3, [r7, #16]
      break;
 8001290:	e027      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d010      	beq.n	80012cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	0c5b      	lsrs	r3, r3, #17
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	4a11      	ldr	r2, [pc, #68]	@ (80012fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80012be:	fb03 f202 	mul.w	r2, r3, r2
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e004      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	613b      	str	r3, [r7, #16]
      break;
 80012da:	e002      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80012de:	613b      	str	r3, [r7, #16]
      break;
 80012e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012e2:	693b      	ldr	r3, [r7, #16]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	007a1200 	.word	0x007a1200
 80012f8:	080018d4 	.word	0x080018d4
 80012fc:	080018e4 	.word	0x080018e4
 8001300:	003d0900 	.word	0x003d0900

08001304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <RCC_Delay+0x34>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <RCC_Delay+0x38>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0a5b      	lsrs	r3, r3, #9
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001320:	bf00      	nop
  }
  while (Delay --);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	60fa      	str	r2, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f9      	bne.n	8001320 <RCC_Delay+0x1c>
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000000 	.word	0x20000000
 800133c:	10624dd3 	.word	0x10624dd3

08001340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e076      	b.n	8001440 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001362:	d009      	beq.n	8001378 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
 800136a:	e005      	b.n	8001378 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff f84a 	bl	800042c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2202      	movs	r2, #2
 800139c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fc:	ea42 0103 	orr.w	r1, r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001404:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	0c1a      	lsrs	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f002 0204 	and.w	r2, r2, #4
 800141e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800142e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001458:	f7ff f8d6 	bl	8000608 <HAL_GetTick>
 800145c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d001      	beq.n	8001472 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800146e:	2302      	movs	r3, #2
 8001470:	e12a      	b.n	80016c8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_SPI_Transmit+0x36>
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e122      	b.n	80016c8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_SPI_Transmit+0x48>
 800148c:	2302      	movs	r3, #2
 800148e:	e11b      	b.n	80016c8 <HAL_SPI_Transmit+0x280>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2203      	movs	r2, #3
 800149c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014de:	d10f      	bne.n	8001500 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800150a:	2b40      	cmp	r3, #64	@ 0x40
 800150c:	d007      	beq.n	800151e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001526:	d152      	bne.n	80015ce <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <HAL_SPI_Transmit+0xee>
 8001530:	8b7b      	ldrh	r3, [r7, #26]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d145      	bne.n	80015c2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	881a      	ldrh	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	1c9a      	adds	r2, r3, #2
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b01      	subs	r3, #1
 8001554:	b29a      	uxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800155a:	e032      	b.n	80015c2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b02      	cmp	r3, #2
 8001568:	d112      	bne.n	8001590 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	881a      	ldrh	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	1c9a      	adds	r2, r3, #2
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001584:	b29b      	uxth	r3, r3
 8001586:	3b01      	subs	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800158e:	e018      	b.n	80015c2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001590:	f7ff f83a 	bl	8000608 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d803      	bhi.n	80015a8 <HAL_SPI_Transmit+0x160>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a6:	d102      	bne.n	80015ae <HAL_SPI_Transmit+0x166>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e082      	b.n	80016c8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1c7      	bne.n	800155c <HAL_SPI_Transmit+0x114>
 80015cc:	e053      	b.n	8001676 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <HAL_SPI_Transmit+0x194>
 80015d6:	8b7b      	ldrh	r3, [r7, #26]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d147      	bne.n	800166c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	330c      	adds	r3, #12
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001602:	e033      	b.n	800166c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d113      	bne.n	800163a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	330c      	adds	r3, #12
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001638:	e018      	b.n	800166c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800163a:	f7fe ffe5 	bl	8000608 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d803      	bhi.n	8001652 <HAL_SPI_Transmit+0x20a>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d102      	bne.n	8001658 <HAL_SPI_Transmit+0x210>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e02d      	b.n	80016c8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1c6      	bne.n	8001604 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f8b0 	bl	80017e0 <SPI_EndRxTxTransaction>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2220      	movs	r2, #32
 800168a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10a      	bne.n	80016aa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80016e0:	f7fe ff92 	bl	8000608 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80016f0:	f7fe ff8a 	bl	8000608 <HAL_GetTick>
 80016f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80016f6:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	0d1b      	lsrs	r3, r3, #20
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001706:	e054      	b.n	80017b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170e:	d050      	beq.n	80017b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001710:	f7fe ff7a 	bl	8000608 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	429a      	cmp	r2, r3
 800171e:	d902      	bls.n	8001726 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d13d      	bne.n	80017a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800173e:	d111      	bne.n	8001764 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001748:	d004      	beq.n	8001754 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001752:	d107      	bne.n	8001764 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800176c:	d10f      	bne.n	800178e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800178c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e017      	b.n	80017d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4013      	ands	r3, r2
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	429a      	cmp	r2, r3
 80017c0:	bf0c      	ite	eq
 80017c2:	2301      	moveq	r3, #1
 80017c4:	2300      	movne	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d19b      	bne.n	8001708 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000000 	.word	0x20000000

080017e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2201      	movs	r2, #1
 80017f4:	2102      	movs	r1, #2
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff ff6a 	bl	80016d0 <SPI_WaitFlagStateUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001806:	f043 0220 	orr.w	r2, r3, #32
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e013      	b.n	800183a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2200      	movs	r2, #0
 800181a:	2180      	movs	r1, #128	@ 0x80
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff ff57 	bl	80016d0 <SPI_WaitFlagStateUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182c:	f043 0220 	orr.w	r2, r3, #32
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e000      	b.n	800183a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <memset>:
 8001842:	4603      	mov	r3, r0
 8001844:	4402      	add	r2, r0
 8001846:	4293      	cmp	r3, r2
 8001848:	d100      	bne.n	800184c <memset+0xa>
 800184a:	4770      	bx	lr
 800184c:	f803 1b01 	strb.w	r1, [r3], #1
 8001850:	e7f9      	b.n	8001846 <memset+0x4>
	...

08001854 <__libc_init_array>:
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	2600      	movs	r6, #0
 8001858:	4d0c      	ldr	r5, [pc, #48]	@ (800188c <__libc_init_array+0x38>)
 800185a:	4c0d      	ldr	r4, [pc, #52]	@ (8001890 <__libc_init_array+0x3c>)
 800185c:	1b64      	subs	r4, r4, r5
 800185e:	10a4      	asrs	r4, r4, #2
 8001860:	42a6      	cmp	r6, r4
 8001862:	d109      	bne.n	8001878 <__libc_init_array+0x24>
 8001864:	f000 f81a 	bl	800189c <_init>
 8001868:	2600      	movs	r6, #0
 800186a:	4d0a      	ldr	r5, [pc, #40]	@ (8001894 <__libc_init_array+0x40>)
 800186c:	4c0a      	ldr	r4, [pc, #40]	@ (8001898 <__libc_init_array+0x44>)
 800186e:	1b64      	subs	r4, r4, r5
 8001870:	10a4      	asrs	r4, r4, #2
 8001872:	42a6      	cmp	r6, r4
 8001874:	d105      	bne.n	8001882 <__libc_init_array+0x2e>
 8001876:	bd70      	pop	{r4, r5, r6, pc}
 8001878:	f855 3b04 	ldr.w	r3, [r5], #4
 800187c:	4798      	blx	r3
 800187e:	3601      	adds	r6, #1
 8001880:	e7ee      	b.n	8001860 <__libc_init_array+0xc>
 8001882:	f855 3b04 	ldr.w	r3, [r5], #4
 8001886:	4798      	blx	r3
 8001888:	3601      	adds	r6, #1
 800188a:	e7f2      	b.n	8001872 <__libc_init_array+0x1e>
 800188c:	080018f0 	.word	0x080018f0
 8001890:	080018f0 	.word	0x080018f0
 8001894:	080018f0 	.word	0x080018f0
 8001898:	080018f4 	.word	0x080018f4

0800189c <_init>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr

080018a8 <_fini>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	bf00      	nop
 80018ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ae:	bc08      	pop	{r3}
 80018b0:	469e      	mov	lr, r3
 80018b2:	4770      	bx	lr
